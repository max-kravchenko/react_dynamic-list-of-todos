{"version":3,"sources":["components/TodoFilter/TodoFilter.tsx","components/TodoList/TodoList.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["CompletedStatus","TodoList","todos","selectTodo","selectedTodoId","selectedStatus","selectedQuery","handleQueryInclude","text","searchQuery","toLowerCase","includes","filteredTodos","filter","completed","title","className","map","id","classNames","type","onClick","TodoFilter","selectStatus","selectQuery","value","onChange","event","target","All","Active","Completed","placeholder","style","pointerEvents","trim","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","find","todo","someTodo","user","setUser","useEffect","userId","userFromList","href","email","name","App","setTodos","isLoading","setIsLoading","todoId","setTodoId","status","setStatus","query","setQuery","loadTodos","a","loadedTodos","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d2358978.chunk.js","sourcesContent":["enum CompletedStatus {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\ntype Props = {\n  selectedStatus: string;\n  selectStatus: (state: string) => void,\n  selectedQuery: string;\n  selectQuery: (search: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = (\n  {\n    selectStatus, selectedStatus, selectQuery, selectedQuery,\n  },\n) => {\n  const handleStatusSelection = (\n    event: { target: { value: string; }; },\n  ) => selectStatus(event.target.value);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedStatus}\n            onChange={handleStatusSelection}\n          >\n            <option value={CompletedStatus.All}> All </option>\n            <option value={CompletedStatus.Active}> Active </option>\n            <option value={CompletedStatus.Completed}> Completed </option>\n\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={selectedQuery}\n          onChange={(event) => selectQuery(event.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {selectedQuery.trim()\n            && (\n              <button\n                data-cy=\"clearSearchButton\"\n                aria-label=\"Search clearing\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={() => selectQuery('')}\n              />\n            )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (id: number | null) => void;\n  selectedTodoId: number | null;\n  selectedStatus: string;\n  selectedQuery: string;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos, selectTodo, selectedTodoId, selectedStatus, selectedQuery,\n}) => {\n  const handleQueryInclude = (text: string, searchQuery: string) => {\n    return text.toLowerCase().includes(searchQuery.toLowerCase());\n  };\n\n  const filteredTodos = todos.filter(({ completed, title }) => {\n    switch (selectedStatus) {\n      case 'active':\n        return !completed\n        && handleQueryInclude(title, selectedQuery);\n\n      case 'completed':\n        return completed === true\n        && handleQueryInclude(title, selectedQuery);\n\n      case 'all':\n      default:\n        return true\n        && handleQueryInclude(title, selectedQuery);\n    }\n  });\n\n  return (\n    <>\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {filteredTodos.map(({ id, completed, title }) => (\n            <>\n              <tr data-cy=\"todo\" className=\"\" key={id}>\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n                <td className=\"is-vcentered is-expanded\">\n                  <p className={classNames(\n                    'has-text-success',\n                    { 'has-text-danger': !completed },\n                  )}\n                  >\n                    {title}\n                  </p>\n                </td>\n                <td className=\"has-text-right is-vcentered\">\n                  {selectedTodoId === id\n                    ? (\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button is-link\"\n                        type=\"button\"\n                        onClick={() => selectTodo(null)}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye-slash\" />\n                        </span>\n                      </button>\n                    )\n                    : (\n                      <button\n                        data-cy=\"selectButton\"\n                        className=\"button\"\n                        type=\"button\"\n                        onClick={() => selectTodo(id)}\n                      >\n                        <span className=\"icon\">\n                          <i className=\"far fa-eye\" />\n                        </span>\n                      </button>\n                    )}\n\n                </td>\n              </tr>\n            </>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => {\n  return (\n    <div className=\"Loader\" data-cy=\"loader\">\n      <div className=\"Loader__content\" />\n    </div>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nexport function wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import classNames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodoId: number;\n  todos: Todo[];\n  selectTodo: (id: number | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  selectedTodoId, todos, selectTodo,\n}) => {\n  const [someTodo] = useState(\n    todos.find((todo) => todo.id === selectedTodoId),\n  );\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(someTodo?.userId || 0)\n      .then((userFromList) => {\n        setUser(userFromList);\n      });\n  }, []);\n\n  const handleWindowClose = () => {\n    selectTodo(null);\n  };\n\n  return (\n    <div\n      className=\"modal is-active\"\n      data-cy=\"modal\"\n    >\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div\n          className=\"modal-card\"\n        >\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${someTodo?.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"Close window\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleWindowClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {someTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              <strong className={classNames(\n                { 'has-text-success': someTodo?.completed },\n                { 'has-text-danger': !someTodo?.completed },\n              )}\n              >\n                {someTodo?.completed ? 'Done' : 'Planned'}\n              </strong>\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { TodoModal } from './components/TodoModal';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [todoId, setTodoId] = useState<number | null>(null);\n  const [status, setStatus] = useState('All');\n\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    const loadTodos = async () => {\n      const loadedTodos = await getTodos();\n\n      setTodos(loadedTodos);\n    };\n\n    loadTodos()\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedStatus={status}\n                selectStatus={setStatus}\n                selectQuery={setQuery}\n                selectedQuery={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (<Loader />)\n                : (\n                  <TodoList\n                    selectedQuery={query}\n                    selectedStatus={status}\n                    todos={todos}\n                    selectedTodoId={todoId}\n                    selectTodo={setTodoId}\n                  />\n                )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {!!todoId && (\n        <TodoModal\n          selectedTodoId={todoId}\n          todos={todos}\n          selectTodo={setTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}